/*
 * File generated by Interface generator (dotup.dotup-vscode-interface-generator)
 * Date: 2019-03-12 12:13:03 
*/
import { InterfaceDeclaration } from "typescript";
import { IEmptyInterface } from "./IEmptyInterface";
import { EmptyClass } from "./Class2";

export interface IExtendsOnly<A, B extends string> {
  /**
   * ExtendsOnly prop1 is nice
   * 
   * https://github.com/dotupNET?tab=repositories
   */
  prop1: number;
  PublicProp1?: string;
  /**
   * My ExtendsOnly Comment on PublicMethod
   */
  PublicMethod(): string;
  PublicMethodWithoutPublic(arg: InterfaceDeclaration): void;
  PublicMethodWithoutPublicVoid(arg: string): void;
  PublicMethodWithoutPublicString<T>(arg: string): T;
}

export interface IImplementsOnly<C, D extends string> {
  prop1: number;
  PublicProp1?: string;
  /**
   * My ImplementsOnly Comment on PublicMethod
   */
  PublicMethod(): string;
  PublicMethodWithoutPublic(arg: InterfaceDeclaration): void;
  PublicMethodWithoutPublicVoid(arg: string): void;
  PublicMethodWithoutPublicString<T>(arg: string): T;
}

export interface IExtendsAndImplements<E, F extends string> {
  prop1: number;
  PublicProp1?: string;
  /**
   * My ExtendsAndImplements Comment on PublicMethod
   */
  PublicMethod(): string;
  PublicMethodWithoutPublic(arg: InterfaceDeclaration): void;
  PublicMethodWithoutPublicVoid(arg: string): void;
  PublicMethodWithoutPublicString<T>(arg: string): T;
}

export interface IExtendsAndImplementsWithoutTypeParameter {
  prop1: number;
  PublicProp1?: string;
  /**
   * My ExtendsAndImplementsWithoutTypeParameter Comment on PublicMethod
   */
  PublicMethod(): string;
  PublicMethodWithoutPublic(arg: InterfaceDeclaration): void;
  PublicMethodWithoutPublicVoid(arg: string): void;
  PublicMethodWithoutPublicString<T>(arg: string): T;
}
